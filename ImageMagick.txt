MSL Magick Scripting Language in XML format
Images are added to stack as the turn up on command line
Stack operations can change stack order
Commands apply to all images on stack unless (...) is used
Has streaming and mpc: format to process big images

mogrify *.png -format jpg    Special case when different filename used by mogrify

mogrify -path thumbdir -thumbnail 100x100  *

convert  in.png -colorspace Gray out.png

See http://www.cit.gu.edu.au/~anthony/graphics/imagick6/color/ how to colorize a greyscale image

buildin images:
rose:
granite:
xc:            X Canvas
fractal:       Plasmafractal
plasma:
print:
scan:          Scanner
vid:           Visual image dir (tiled thumbnails)
x:             import from X server
gradient:
histogram:
mpr:           Save to memory only

patterns:
http://www.imagemagick.org/script/formats.php

output fileformats used as prefix to file ("-" is STDIN):
miff:      ImageMagick format with stack etc.
txt:       Pixel color as text file

general:
-auto-orient             Autoorient from DigiCam
-egde ...               Detect edges
-evaluation ...         Arithmetics
-magnify factor
-path dir                Output path
-posterize levels       Reduce color levels
-preview ...            Set style for previews
-print string           Print to console
-quality value          JPEG Qual 0-100 (def 75)
-quantize colorspace    Reduce colorspace
-region ...             Apply options to region only
-snaps                  Capture more than one screenshot
-stegano ...
-strip                  Strip profiles and comments
-thumbnail widthxheight{%} {@} {!} {<} {>}
-title value
-update seconds         Redisplay an image

-composite mode         Merge images

-resize widthxheight{%} {@} {!} {<} {>}
fit image into this rectangle ("!" to neglect aspect ratio)
"@" for image area
">" to resize only oversized images

-sample ...             Scale down
-scale ...

convert '*.jpg[120x120]' thumbnail%03d.png   convert as they are read
convert '*.jpg[120x120+10+5]' thumbnail%03d.png   inline image crop

convert file -fill white -draw "color 1,1 replace" filenew	replace at occurences of color of pixel in upper left corner

Arranging:
montage -geometry +borderx+bordery -tile colsxrows -title String...
-append ...             Arrange mulitple images
-mosaic                 Create mosaic

montage -label %f -frame 5  Label as filename
-background #336699
-geometry +4+4
1.jpg 2.png result.jpg

Improvement:
-black-threshold         Force point below threshold to colour
-comment text
-contrast-stretch black-point{xwhite-point}{%}}
-despeckle
-enhance                enhance noisy image
-equalize               equalize histrogram
-label name
-lat ...                local adaptive thresholding
-level ...              level of image contrast
-modulate ...           brightness, saturation, hue
-normalize              norm to full colour values range
-sharpen
-threshold value{green,blue,opacity}{ %}
-white-threshold threshold
-deskew ...		automatic deskew [of scanned images] (e.g. parameter 40)
			-set option:deskew:auto-crop width to auto crop the image

Effects:
-blur ...
-charcoal ...           Simulate charcoal drawing
-colorize color
-fx                     Math expr to image
-implode factor         Implode pixels
-morph frames           Morph images
-paint radius           Simulate oil painting
-polaroid angle         Simulate polaroid
-roll ...
-rotate ...
-sepia-tone ...         Simulate sepia-toned photo
-shade ...
-shadow ...
-shear ...
-sketch ...             Simulate pecil sketch
-solarize ...           Negate pixels above a threshold
-spread ...             Spread image pixels randomly
-swirl degrees
-tint value             Tint with fill colour
-unique-colors          Discard all but one of any pixel color
-unsharp

Editing:
-crop                   Cut out region
-draw ...               Draw graphics primitives
-shave ...              Remove pixels from border
-trim                   Remove border that are exactly same colour as corner pixels
-extend ...             Extend to given size
pattern:...             Build-in image pattern
+repage                 Remove canvas info from cropped image
convert in.jpg -gravity Center -crop ... out.gif   Get middle
convert in.jpg -crop 50% out.jpg

Frame:
-border widthxheight             Surround with border
-bordercolor color
-borderwidth width
-frame
-vignette ...           Soften edges
-raise ...              Make button
-shadow

Info:
indentify -format "..." file.jpg   Find file info

Text:
-annotate ...           Add text (-draw more general)
-font name              Use font name
-undercolor             Colour of annotation bounding box
convert -font helvetica -fill white -pointsize 36 \
-draw 'text 10,50 "Annotation"' \
in.jpg out.jpg
convert -background lightblue -fill blue \
  -font helvetica -pointsize 72 label:Text \
  out.gif               Also -size instead of -pointsize possible
label:@/dir/file.txt    Takes text from file
caption:Text            Wraps text that doesnt fit
text:Text
-fill color
-stroke color
-strokewidth value

compare 1.jpg 2.jpg diff.jpg      compares images
-fuzz distance         Colours that are equal
-metric type           Calculate value of total difference

compose ...                           combine images 

(not all options explained)
COL is name or "rbg(r,g,b)" or "hsl(h,s%,l%)"
do +repage if needed when changing size

= General =
| mogrify *.png -format jpg | convert format |
| mogrify -path //DIR// -thumbnail //W//[x//H//][%][!][<][>] * | create thumbnails |
| mogrify //PIC// -rotate[<][>] //DEGREESCW// | clockwise rotation (">" make Hochformat; "<" make Querformat) |
| mogrify //PIC// -vignette //RADIUS// | soften edges |
| mogrify //PIC// -strip | strip any comments and profiles |
| convert -list color | list all color names |
| convert -list font | list all font names |

= Colors =
Color spec:
#abc = #aabbcc = rgb(170,187,204) = rgb(66%,73%,80%) = hsl(..,..,..)
4th value can be transparency
"none" = #0000
| mogrify //PIC// -background //COL// -flatten +matte | remove transparency |
| mogrify //PIC// -fill //COL// -opaque //NEWCOL// | replace color |
| mogrify //PIC// -transparent //COL// | make color transparent |

= Create image = 
| convert gradient:yellow-limegreen//W//x//H// //FILE// | create gradient |
| convert xc://COL//[//W//x//H//] //FILE// | solid colour |
| convert pattern:hexagons //FILE// | create pattern; here hexagons |
| convert rose: x: | display example picture on X11 |
| convert -background //COL// -fill //COL// -font //FONT// -pointsize //SIZE// -size //W//x//H// -gravity //DIRECTION// caption:'//TEXT//' //FILE// | create text image (with wrapping) |
| convert //PIC// +matte -fx //COL// //SINGLECOL// | single color fill |

= Edit image =
| mogrify //FILE// -fill //COL// -stroke //COL// -strokewidth //VAL// -draw "line //X1//,//Y1// //X2//,//Y2//" | draw graphics primitives (point, line,circle,Bezier,...) |
| mogrify //FILE// -draw "image Over //X//,//Y// //W//,//H//" | include an image (size 0,0 for automatic) |
| composite -geometry //X//x//Y// //INSET// //PIC// //OUTPUT//

= Annotate =
| mogrify //FILE// -fill //COL// -draw "gravity South rotate //#// scale //#// text //X//,//Y// //STRING//" | annotate with text |
| mogrify //PIC// -fill //COL// -font //FONT// -pointsize //SIZE// -gravity south -annotate //ROT// //TEXT//| create text image (with wrapping) |
| mogrify //PIC// -rotate 90 -gravity southwest -annotate 0 "..." -rotate -90 | Annotate SouthEast corner with rot -90 Text |
| mogrify //PIC// -stroke '#000c' -strokwidth 2 -annotate 0 "Text" -stroke none -fill white -annotate 0 "Text" | annotate with bordered text |

= Montage =
| montage -title "..." -background //COL// -bordercolor //COL// -mattecolor //FRAMECOL// -fill //TEXTCOL// -label "..." //PIC1// -label "..." //PIC2// ... -tile [//N//]x//M// -frame //dF// -geometry [//W//x//H//]+//dX//+//dY// //OUTPUT// | arrange with filename as label and frame (label %f for filename) |

= Change size =
| mogrify //PIC// -resize "//W//x//H//[%][!][>][^]" | ">" only if width or height exceeded, "^" give minimum for one side, "!" force given size (-scale simpler but faster) |
| mogrify //PIC// -crop //W//x//H//{+-}//XPOS//{+-}//YPOS//[%] | crop image (specify position and final size) |
| mogrify //PIC// -gravity Center -crop //W//x//H//[%] | crop image to given size from center |
| mogrify //PIC// -bordercolor //COL// -border //dX//[x//dY//] | make border of given width |
| mogrify //PIC// -shave //dX//x//dY//[%] | remove border of given size |
| mogrify //PIC// -trim | remove border that is of same (similar if -fuzz) color as corner |
| mogrify //PIC// -mattecolor //COL// -frame //W//[x//H//] | make frame |

= Text label =
"@//FILENAME//" for reading content from file
-text-font	font for fixed width text
| mogrify //PIC// -gravity south -fill //TEXTCOL// -font //FONT// -draw "text 0,0 ..." | Annotate |
| mogrify //PIC// -gravity south -background //COL// -splice 0x//H// -fill //TEXTCOL// -draw "text 0,0 ..." //OUTPUT// | Annotate on new area |
| mogrify //PIC// -gravity south -undercolor //BOXCOL// -annotate //ROT//[+//X//+//Y//] "..."
