= Holoviews

////
Status: 1.9.2
Release notes: https://github.com/ioam/holoviews/releases
////

:toc:

== Initialize

    import holoviews as hv
    hv.notebook_extension("bokeh", "matplotlib")

    %output size=150                            # Global config

    %%opts Curve [tools=["hover"]]              # Cell config
    curve = hv.Curve((xs, ys))
    curve

[cols="m,d"]
|===
| hv.help(..)                               | Specially formatted help
| hv.help(.., pattern="group")              | Show only items matching some regex
| hv.help(.., visualization=True)           | Options for visualization, not for object itself
| %%output info=True                        | Show visualization info on object returned from cell
|===

* Holoviews stores data and some semantics (e.g. key dims, value dims) to be able to plot data easily
* Composed plots and interactive plots are easy
* Data is stored in suggested plots (e.g. scatter) and can be converted between them (e.g. to table)
* depends only on `numpy` and `param`
* possible to slice, de-/re-compose data directly on elements
* `/assets` directory for data (?)

== Elements

http://holoviews.org/reference/index.html[Containers, Elements, Streams, Apps Reference]
http://holoviews.org/Reference_Manual/holoviews.element.html[Element API Reference]

[cols="m,d"]
|===
| el = _Element_(_data_)                    | Almost all elements need data as single positional argument (except Arrow, Text, Bounds, Box, Ellipse)
| _data_ = pd.DataFrame(..)                 |
| _data_ = ([..], [..], [..])               |
| _data_ = {"col1":[..], ..}                |
| _data_ = iter([y1, y2, ..])               |
| _data_ = iter([(..), (..), ..])           |
| _data_ = np.array(..)                     |
| _group_=".."                              | Semantically similar (can be accessed as group in Layout containers)
| _label_=".."                              | Element label
| _datatype_="xarray"                       |
| _datatype_="cube"                         | `iris.cube.Cube`
| _datatype_="image"                        | `nd.ndarray`
| el2 = _Element2_(el1)                     | Casting (if same number if `kdims`)
| print(el)                                 | `str(el)` to see structure information
| el.data                                   | Access data
| el(plot={..})                             | (?)
| el.options(..)                            | Set options; dict or kwargs
|===

* both `group` and `label` are used for legend by default
* parameters handles by http://ioam.github.io/param/[sublibrary]


== Dimensions / Axes

Many elements have key dimensions `kdims` and value dimensions `vdims`.

[cols="m,d"]
|===
| hv.help(hv.Dimension)                     | Get help
| Element(data, kdims, vdims)               |
| _kdims_=..                                | Set key dimension (like function input)
| _vdims_=..                                | Set value dimension (like function output)
| = "name"                                  |
| = ["name1", "name2", ..]                  |
| = ("name", "label")                       |
| = Dimension(..)                           |
| _range_ = (.., ..)                        |
| el.redim(dimname=..)                      | Reset dimension
| el.redim.*                                | Modify dimension properties
| el.redim.label(dimname="label")           | Modify dimension label only
| el.redim.range(dimname=(.., ..))          | Modify dimension range only
| el.redim.unit(dimname=..)                 | Modify dimension unit only
|===

Other dimension properties:

* `range`: cyclic ranges, hard range
* `soft_range`: soft range (specify useful range for widgets)
* `step`: sampling steps
* `unit`
* `values`: categorical value set
* value_format
* date axis supported


== Particular elements

[cols="m,d"]
|===
| Dataset(..)                               | General container
| Curve(df, kdims="x", vdims="y")           | Also single element possible
| Curve((xs, ys), kdims="x", vdims="y")     | Default names are already `"x"` and `"y"`
| Spread(..)                                | Filled band
| Area(..)                                  | Filled area to axis or between curves (x needs to be sorted)
| Area.stack(overlay)                       | Stacked area plots
| Bars(..)                                  | Bar plot; can have up to "group" (x-axis), "category" (same x), "stack" kdims
| BoxWhisker(..)                            |
| [invert_axis=True]                        | Change x/y axis
| [boxprops={..}]                           |
| [whiskerprops={..}]                       |
| [flierprops={..}]                         |
| (points +
   << BoxWhisker(points["y"]) +
   << BoxWhisker(points["x"])               | Add BoxWhisker Marginals to a scatter plot
| Scatter(..)                               | x-y Scatter plot
| (marker="..")                             | Bokeh as takes Matplotlib spec for markers
| Points(..)                                | x1-x2 Scatter plot (both kdims)
| [color_index=_num_]                       | Use this column in data for color
| [size_index=_num_]                        | Use this column in data for size
| [scaling_factor=10]                       | Adjust size
| points.hist(..)                           | Add marginal histogram to point scatter plot http://holoviews.org/user_guide/Plotting_with_Bokeh.html[Userguide Plotting with Bokeh]
| Spikes(..)                                | Parallel lines of constant of variable length
| [color_index=_num_]                       | Use this column in data for color
| [yticks=..]                               | Position
| el << Spikes(..)                          | Add marginal distribution
| Hextiles((x, y))                          | Hexbin
| Histogram(np.histogram(_vals_, bins="auto"))  | Histogram
| [projection="polar"]                      | Polar histogram
| [norm={axiswise:True}]                    |
| HeatMap({..})                             |
| HeatMap(dd.groupby(["x", "y"]).z.sum().to_dict())  | HeatMap (discrete); Matplotlib backend will also plot numbers
| el.hist(num_bins=.., dimension=["x", "y"])    | Add marginal histograms with Bokeh; Creates `SideHistogram`
| Raster(..)                                | 2D keys are integers
| QuadMesh(..)                              | Non-regular quadpolys
| Image(.., bounds=(..))                    | 2D with continous implicitely regular bounds; continuous unlike `Raster`
| RGB(np.dstack([r,g,b])                    | Image with channels
| Distribution(..)                          | Distribution (KDE); uses Seaborn
| Bivariate(..)                             | Bivariate contour plots; uses Seaborn
| Regression(..)                            |
| %%opts Bivariate [joint=True]             |
| TimeSeries(..)                            | Time series plot; uses Seaborn http://seaborn.pydata.org/generated/seaborn.tsplot.html[tsplot]
| DFrame(..)                                |
| dframe.clone(x=.., y=.., plot_type="pairplot")    | Do Seaborn plot on hv.DFrame
| %%opts DFrame (map=("barplot", "x", "y") col=.. row=.., hue=..) +
  dframe.clone(plot_type="facetgrid")       | Use Seaborn FacetGrid; Specify `.map` parameters
| ItemTable(..)                             | A simple key-value list which can display as a table
| Table(..)                                 |
| table.to.<el>(..)                         |
| VLine(..) +
  HLine(..)                                 | Line annotation
| Splice(..)                                |
| Text(..)                                  |
| Path([[xy_pairs], ..])                    |
| Contours(.., level=..)                    |
| Polygons(..)                              |
| Bounds((left, bottom, right, top))        | Rectangular box
| [aspect=..]                               | Set aspect for various elements
|===

* http://holoviews.org/Tutorials/Elements.html[Elements Tutorial]
* e.g. `Curve` mean continuous mapping given by a sample
* `Scatter`: kdim and vdim; combine with Charts
* `Points`: has no single point indexing, since nearest neighbours difficult; combine with Raster
* Categorical axis supported by `HeatMap`, `Points`, `Scatter`, `Curve`, `ErrorBar`, `Text`
* http://holoviews.org/Tutorials/Pandas_Seaborn.html[with Seaborn]: `Distribution`, `Regression`, `Bivariate`, `TimeSeries`
* color plots take `[cmap=".."]`
* there is also an `HSV(..)` for a different color space


== Style

* usually done by IPython `%%output`, `%%opts` commands

=== Output

[cols="m,d"]
|===
| %output ..                                |
| %%output ..                               |
| hv.output(..)                             |
| size=150                                  | Percent of original
| filename=..                               | Output file (`%%output`, `output only`)
| fig=..                                    | Output format. Backend dependent
| holomap="widgets"                         | Display for `HoloMap`s (also `"scrubber"`)
| dpi=..                                    | Output resolution (where applicable)
| backend="matplotlib"                      | use Matplotlib here
|===

=== Opts

[cols="m,d"]
|===
| help(hv.util.parser.OptsSpec)             | Help
| %opts ..                                  | Global settings
| %%opts ..                                 | Cell settings
| %%opts _Type_[._Group_[._Label_]] ...     | Identify Element
| ... [_plotting_]                          | Holoviews plotting options
| ... (_passthrough_) +                     | Backend extra (style) options
| ... {_normalization_}                     | Normalization (axis scaling between images, image brightness, ...)
| %%opts Curve [..] Scatter [..]            | Multiple possible in one line
| el.opts({"Curve":+
            {"plot":.., +
             "style":.., +
             "norm":.. +
             },..)                          | Python code version; Return new object
| hv.opts({"Curve":{"style":..},..)         | Python code version (usually only for non-Jupyter)
| Element._opt_name_ = ..                   | Alternative way to set class option
| Element.set_param(_opt_name_=.., ..)      | Alternative way to set class option
| hv.Store.add_style_opts(_Element_, ["opt_name"])  | Add backend option which was not offered yet
| with hv.StoreOptions.options(el, options={..}):   |
|===

* options delimited by space or optional comma
* also `param` entries on http://holoviews.org/Reference_Manual/holoviews.element.html[Element API]
* `hv.util.parser.OptsSpec.parse("Element ..")` to parse `%%`-style syntax manually
* plotting options stored in `OptionTree`s separate from data

=== Plotting Opts

[cols="m,d"]
|===
| [tools=["hover", "box_zoom"]]             |
| [width=.. height=..]                      | In pixels
| [show_legend=False]                       |
| [legend_position="right"]                 |
|===

=== Normalization Opts

[cols="m,d"]
|===
| {+framewise}                              | Normalization independent in each frame
| {-framewise}                              |
| {+axiswise}                               | Normalization independent in each axis (subplot)
| {-axiswise}                               |
|===

* can be axis scaling and image brightness

=== Example Styles

[cols="m,d"]
|===
| %%output backend="matplotlib"             |
| %%opts Histogram [norm={axiswise:True}]   |
| %%opts Scatter [tools=["box_select", "lasso_select"]] +
         Layout [shared_datasource=True]    | Linked plots if multiple `Scatter` and same data source used
|===


=== Properties?

[cols="m,d"]
|===
| hv.plotting.bokeh.element.line_properties |
| alpha                                     |
| color                                     |
| hover_alpha                               |
| hover_color                               |
| hover_line_alpha                          |
| hover_line_color                          |
| line_alpha                                |
| line_cap                                  |
| line_color                                |
| line_dash                                 |
| line_join                                 |
| line_width                                |
| muted_*                                   | Style of unselected plots
| muted_alpha                               |
| muted_color                               |
| muted_line_alpha                          |
| muted_line_color                          |
| nonselection_alpha                        |
| nonselection_color                        |
| nonselection_line_alpha                   |
| nonselection_line_color                   |
| selection_alpha                           |
| selection_color                           |
| selection_line_alpha                      |
| selection_line_color                      |
| hv.plotting.bokeh.element.fill_properties |
| fill_alpha                                |
| fill_color                                |
| hover_fill_alpha                          |
| hover_fill_color                          |
| muted_fill_alpha                          |
| muted_fill_color                          |
| nonselection_fill_alpha                   |
| nonselection_fill_color                   |
| selection_fill_alpha                      |
| selection_fill_color                      |
| hv.plotting.bokeh.element.text_properties |
| text_align                                |
| text_alpha                                |
| text_baseline                             |
| text_color                                |
| text_font                                 |
| text_font_size                            |
| text_font_style                           |
| other Bokeh properties                    |
| xrotation=90                              |
|===


== Layout

[cols="m,d"]
|===
| el1 + el2                                 | Side by side `Layout`
| Layout([..])                              | Side by side
| el1 * el2                                 | Same plot `Overlay`. Order determines z-order and legend.
| Overlay([..])                             | Overlayed
| Layout(..).cols(num)                      | Set number of columns
| layout._type_._roman_ +
  layout.Curve.I                            | First curve element
| layout._group_._label_                    | Select element if group/label were givens
| Empty()                                   | Empty element as placeholder
| %%opts Layout [sublabel_format=..]        | Format of subplot titles
| [aspect_weight=..]                        | 0..1 to set Layout weight (?)
| hv.operation.gridmatrix(..)               | (?)
|===

* `Overlay` uses color cycles
* `Layout` can contain any container except `NdLayout` (see http://holoviews.org/user_guide/Building_Composite_Objects.html[Ref])
* `Overlay` can only contain `NdLayout`

=== Styling categorical Overlays

You can use `hv.Cycle` to specify properties for options.

    color_cycle = hv.Cycle(['red', 'green', 'blue'])
    points.options({"Points": {"color" :color_cycle}})

Palettes are continuous. They will normalize and cover whole range, whereas Cycle uses colors one by one.

[cols="m,d"]
|===
| hv.Cycle([..])                            | Create cycle
| hv.Cycle("...")                           | Cycle by name
| hv.Cycle.default_cycles.keys()            | Names of default cycles
| hv.Palette("...")                         | Palette by name
| hv.Palette.colormaps.keys()               | Palette names
|===

== Colormapping

[cols="m,d"]
|===
| cmap=..                                   | Set colormap to use (by name or list of hex/HTML names)
| cmap={"val":"col",...}                    | Explicit mapping for categoricals
| color_index=..                            | Declare color_index variable to use (by name or numeric)
| color_levels=..                           | Discretize colormaps to limited number of levels
| clipping_colors={"min":.., "max":.., "NaN":..}    | Set color for outside range (default: min=first, max=last, NaN=transparent)
| hv.plotting.list_cmaps()                  | List colormaps
| logz=True                                 | Log colorscale
| symmetric=True                            | Make colors centered at zero
| colorbar=True                             | Enable colorbar
|===

* Images and Heatmaps use first vdim as `color_index`
* Colormaps are hardcoded and taken from matplotlib, bokeh and colorcet
* Categorical values automatically get legend unless `show_legend=False`

== Dimensioned (dict) containers

http://holoviews.org/user_guide/Dimensioned_Containers.html[Dimensioned containers] are indexed and can be shown with sliders or in a grid/overlay.

[cols="m,d"]
|===
| hm = HoloMap(data_dict)                   | Keys are params, Values are plots; Numeric keys are shown as sliders, non-numeric keys are shown as dropdown
| NdOverlap(..)                             | Overlay all; with legend
| NdLayout(..)                              | Plot side-by-side; with titles; elements need to be same type
| GridSpace(..)                             | 2D side by side grid
| hm.overlay("var")                         | Use this variable for color (other stay slider)
| hm.layout("var")                          |
| hm.grid("var")                            |
| ndlay(..)[..].cols(3)                     | When too much for GridSpace
| hm.HoloMap(..hv.Layout..).*collate*()     | Convert HoloMap of Layout to more correct Layout of HoloMaps
|===

* `HoloMap`, `GridSpace`, `NdOverlay`, `NdLayout` cannot mix types and have different element selection
* incompatible sub-elements would not be displayed; use `.collate`
* are ordered
* keys can be more complex examples with name, type, unit
* can transform, sample, reduce, collapse into elements
* somehow passing a Pandas Series as value to hv.Curve caused problems with .overlay

=== Selecting elements by key

[cols="m,d"]
|===
| hm.select(var=..)                         |
| hm[.., ..]                                | also select specific values; slices possible (inclusive end(?))
| hm[_val_]                                 | Specific value
| hm[_val1_:_val2_]                         | Slice (same Element class returned)
| hm[.., ..] = el                           | can be assigned
| hm.reindex(["kdim2", "kdim1"])            | Change order of `kdims`
| ds = Dataset(grid.table()) +
  ds.data.head()                            |
| hm.add_dimension("name", dim_pos=.., dim_val=..)  | Useful when merging different
| hm.last                                   | Last element
| hm.info                                   | Info
| hm.sample(..)                             | Sample regularly space points
|===


== Dynamic (recalculated) maps

http://holoviews.org/user_guide/Live_Data.html[Live data]

[cols="m,d"]
|===
| dmap = DynamicMap(func, kdims=["a", "b"]) | `func` returns plot (first only printed)
| dmap.redim.range(a=(..,..))               | Supply range
| dmap.redim.values(a=[..,..,..])           | Specific values
| dmap[{..,..,..}]                          | Sub-select specific values
| dmap[{..,..,..}, {..,..}]                 | Sub-select cartesian product of specific values
| dmap.overlay(..)                          | Group values
| dmap.groupby([kdim1, ..], group_type=NdOverlay, container_type=GridSpace) |
|===

* plots are live calculated and not precalculated
* needs notebook server
* `dmap.data` is just cache
* can convert from `DynamicMap` to `HoloMap`
* grouping internally with `.groupby`

== Selecting data
http://holoviews.org/user_guide/Indexing_and_Selecting_Data.html
* can use deep indexing with `select` on composite objects

== Tabular data

* http://holoviews.org/user_guide/Tabular_Datasets.html[Tabular data]
* can use
** Python dict of Numpy
** pure Numpy
** Pandas DataFrame
** Dask DataFrame
** Iterator of ys
** Iterator of (x,y) tuples
** (xs, ys)

[cols="m,d"]
|===
| Table((xs, ys))                           | (when displayed, may show only some rows)
| Dataset.datatype                          | Allowed data types. Included gridded data types
| Scatter(.., datatype=[".."])              | To select data type manually
| table.array()                             |
| table.dframe().head()                     |
| table.columns()                           | OrderedDict
| Dataset(..)                               |
|===

* using same variable will share data (will also support Bokeh brushing)
* datatype=["grid"] to convert to gridded

== Gridded data

Data on regular multi-dimensional http://holoviews.org/user_guide/Gridded_Datasets.html[grid] (e.g. Images, Multi-dim arrays).

== Data containers

[cols="m,d"]
|===
| el.dimension_values("var")                | Get array of dimension values
| expanded=False                            | Get only unique values
| flat=False                                | Get same shape array (hence values clones across all other dimensions, if a kdim used)
|===


== Operations on data

[cols="m,d"]
|===
| el.select(_var_=_val_)                    | Select slice
| el.sort()                                 |
| el.relabel("..")                          |
| _reverse_=True                            |
| el.sort(["a"])                            |
| el.aggregate("var", function=np.mean)     | Groupby-Aggregate
| el.reduce(var=np.mean)                    | Like aggregate on all other variables
| hmap.collapse(function=.., spreadfn=..)   |
| data.to(..)                               | Groupby? Convert while giving parameters?
|===

== Indexing and Selecting data

Applied on `kdims`. Indexing information seen with `print(el)`

[cols="m,d"]
|===
| el[..]                                    | indexing (in variable order), also with slices
| el.select(..)                             | Like getitem selection; slices as tuples
| el.iloc[..]                               | Position indexing
| el.sample(..)                             | Subset data by possibly multiple dimensions
| hm.sample((numx, numy))                   | Sample regular intervals from HoloMap
| hist[_val_]                               | Select count of bin
| curve[_val_]                              | Select value of closest sample
| bounds=(..)                               | Define bounds from where to sample
| el.table().select(..)                     | Select from table (similar to sampling); Points as `set` and Ranges as `tuple`
|===

    dd.to(hv.BoxWhisker, "x", "Value", groupby=[])

* Specification by positional or `var=`
* `iloc` supports:
** single integer
** list/array of integers
** slice of integers
** boolean array
* Charts like Curve, Scatter, Histogram only support explicit list of samples (since for regular grid)

== Transforming data

`Operation` like `histogram`, `rolling`, `datashade`, `decimate` can transform data. Can be chained or applied lazily. Transform `Element` or `Overlay`. Parametrized by `param` library for easy validation and documentation.

[cols="m,d"]
|===
| operation.*                               | Operations in this table
| hist = histogram.instance(num_bins=100)   | Create instance wiht preset bins
| hist(el)                                  | Create histogram (of first dimension)
| hist(.., groupby="var")                   |
| histogram.num_bins=100                    | Set at class level for all future plots
| timeseries.*                              | Timeseries operations (`rolling`, `rolling_outlier_std`)s
|===

* http://holoviews.org/user_guide/Transforming_Elements.html[Userguide Transforming Elements]
* for containers operations are applied on each element individually
* defined customer operations by subclassing `Operation`
* encapsules complex data pipelines
** automatically nice `help`
** parameter validation
** all stages are already visualizable
** understand HoloViews data structures
** can be applied lazily for data exploration
* if want a functions which looks at all sub-elements at once, do not use `Operation`
* `param.ParametrizedFunction` useful still

== Respond to events

* http://holoviews.org/user_guide/Responding_to_Events.html[Userguide Responding to Events]
* Holoviews Steams have parameters that change over time and automatically refresh
* allow any sort of value to be supplied from anywhere (e.g. dynamic visualizations)
* <read section>

[cols="m,d"]
|===
| streams.Stream.define("Time", t=0.0)   |
|===

== Working with large data

Using Datashader to plots millions of points and also handle overplotting nicely.

[cols="m,d"]
|===
| from holoviews.operation.datashader import datashade +
  datashade(el)                             | Get smartly pixel-sampled version; Single Pixel for points
| decimate(el)                              | Plain down-sampling
| dynspread(datashade(el))                  | Spread such that points are bigger than a pixel
| datashade(el, aggregator.ds.count_cat("var")  | Color by categories and add pixel colors mathematically
|===

* datashade recalculated dynamically
* `datashade(el)` is convenience for `shade(aggregate(el))`
* can use `Dask` if data too large for memory
* see http://holoviews.org/user_guide/Large_Data.html[Userguide Large Data/Hover info] how to add tooltips back
* http://holoviews.org/gallery/apps/bokeh/nytaxi_hover.html[NY Taxi Demo]

== Exporting data

http://holoviews.org/Tutorials/Exporting.html[Exporting Tutorial]

== Special

[cols="m,d"]
|===
| Store.add_style_opts(Image, ["filternorm"], backend="matplotlib")  | Add unregistered style option
| Palettes("..")                            |
|===

* use `Store.dump` and `Store.load` to persist full objects (`pickle` stores core data only)
* for reducing size of HTML see http://holoviews.org/FAQ.html[FAQs]

== UNREAD sections

* Custom Interactivity
* Data Processing Pipelines
* Creating interactive network graphs
* Working with streaming data
* Creating interactive dashboards
* Deploying Bokeh apps
* Working with plot and renderers
* Exporting and archiving
* Continuous coordinates

== Unsorted

* open slices `dmap[:, 0.1:0.9]`

|===
| %%opts Curve [tools=["hover"]]            |
| hm.overlay("kdim1")                       | Show all `kdim1`. Others as slider.
| Spread(dd.aggregate("y", np.mean, np.std) | Show band
| dd.to(BoxWhisker, "x", "y", groupby=[])   |
| dd.to(Distribution, "y", [], groupby="x") |
| HeatMap((["x1", ..], ["y1", ..], arr))    |
| heatmap.table()                           |
| edges_counts = np.histogram(arr) +
  Histogram(edges_counts)                   |
| hist[val]                                 | Access countss
| %%opts Points [tools=["hover"]]           | Add hover Tooltip
| hm.table().to.scatter3d()                 | Mapped 2D data as 3D scatter
| el.clone(datatype=["xarray"])             | Create as new data types
| %%opts Overlay [tabs=True]                | Enable Tab view
|===

    renderer = hv.Store.renderers["matplotlib"].instance(fig="svg", holomap="gif")
    renderer.save(layout, "name")
