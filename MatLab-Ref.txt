<command> ;       # don't display
<commandpart> ...
<commandpart>      # multiline

eval(<expression>)

preallocate vectors improves speed

GUIDE to visually create GUI

^K                  # kill to EOL

A=[1 2;3 4]
A(1,1)==1
A(3)==3

A(3,3)=4    # > increase size

A=B(:)

start:step:end  # slice

A'          # transpose

sum(A)      # column sums
sum(A,subscript) # sum over the given subscript
diag(A)     # trace

*** Cell array (of matrices) ***
cell        # create empty matrix cell array
A={...}     # create cell array (for elements of different size)
A{1}

*** Dynamic Field Names (Dictionaries) ***
s.(<key>)

*** Strings ***
A = ['ABC',' DEF']  # concenate

*** Functions ***
In <funcname.m>:
function <returnvar> = <funcname>(<params>) # first function is primary (and only accessible)
...
<returnvar>=<result>

nargin, nargout         # stored num of arguments

var=<funcname>(<params>)        # otherwise stored in "ans"
<funcname> <param> <param>...       # possible if no output value required

Anonymous function
func=@(<arglist>)<expression>

funchandle=@func

Private functions for <name> are in <name>/private

Overloading possible


glocal <GLOBALVAR>  # write this in all files
*** Numbers ***
Float:
prec 16 digits
exp 10^308
NaN
Inf
eps         # 2^-52 (float prec)
i           # imaginary

format      # set format of number output

h = findobj('Prop','Value',...)

**** Matrices ***
zeros       # all zeros
ones        # all ones
rand        # random numbers
randn       # normally distr random numbers

load var.dat    # reads matrix var from file (blank separated)

A=[B C;D E] # combine matrices

A(:,2)=[]   # delete row

x=x(abs(x-mean(x))<=3*std(x))   # filter; remove outliers

A(~isprime(A))=0    # map; zero out primes

indices=find(isprime(A))'
A(indices)

*** Operations ***
.*          # element by element operations
.'          # unconj. array transpose

help elfun
help specfun
help datafun
help stats

fminsearch      # find minimum
fzero           # find zero
quad            # numerical integration

*** Structures ***
S=struct('field1','value1','field2',...)
OR
S.field1=value1
S.field2=...
[S.field] == [S(1).field, S(2).field, S(3).field]   # S is array of struct

*** Plot ***
x=
y=
axis ...
xlabel ...
grid ...
title ...
subplot(Nx,Ny,part_for_plot)
plot(x,y,'c->','Prop','Value',...,x,y,...) # colour, line, marker
plot(...,'Prop','Value',...) # properties, also dicts possible (see doc Setting Object Properties)
handle=plot(...)

hold on
<additional plots>      # add plots to output
hold off

*** 3D Plot ***
[X,Y]=meshgrid(1:0.1:8)
Z=f(X,Y)
hidden ...
colormap...
camlight ...
lighting...
colormap...
mesh(X,Y,Z)
surf(X,Y,Z)

*** Animations ***
see doc

** Control flow ***
if ...
elseif ...
else ...
end

=~      # not equal

isequal         # test for matrix, because matrix returned otherwise
isempty
all
any

switch (...)
case ...
case ...
end

for n=1:10
...             # use ";" to supress printing!
end

while ...
...
end

continue
break

return
