== YARN

* split resource mgmt (ResourceManager) from job scheduling/monitoring (ApplicationMaster)
* computation: ResourceManager, NodeManager
* memory, CPU, disk
* YARN_NODEMANAGER_OPTS env var
* to see resources from nodes go to RM UI //...:8088/cluster/nodes
* memory/CPU: min-alloc=increments; max-alloc=max
* container killed if vmem-pmem-ratio factor on map or reduce exceeded
* Mapper/Reduce ask for memory/CPU/disk; AM only ask for memory/CPU
* each container is JVM process
* usually java.opts=0.8 container memory

== Hadoop

* Cloudera sometimes use Kudu (distributed columnar store) instade of HDFS; rely on Spark instead of MapReduce
* Hortonworks: also Spark
* Databricks: Spark-people; prefer Mesos over YARN
* Hive useful for file-to-table mgmt
* Impala for massively parallel processing
* Tableau want to support Spark directly sometime
* Spark streaming a bit weak?
* Kerberos only full implemented auth for Hadoop (even though bad); use Ranger or Sentry to reduce pain (need, otherwise each part does own auth)
* Ranger (Hortonsworks) slightly ahead of Sentry (Cloudera)
* HBase good; with Phoenix you can query by SQL tool; Ambari integrated
* Impala: massively parallel on HDFS; much faster than Hive; can replace Teradata and Netezza; supported by Cloudera (Hortonswork Phoenix instead)
* Kafka: distributed messaging; a bit basic though
* Storm/Apex: better than Spark at streaming; but mgmt and API not so good
* Ambari/Cloudera Mgr: Best to monitor cluster
* Pig: won't be there for long; Spark better; other alternatives are Apache Nifi or Kettle
* Nifi/Kettle: Kettle more mature; improvement over Oozie?
* Knox: Edge protection; reverse proxy written in Java with auth; not well written; obscure errors
* Kylin: precalc into cubes(?)
* Atlas/Navigator: Hortonworks new data governance tool; no fully baked; may surpass Cloudera's Navigator

obsolete(?)
* Oozie: error-hiding; diff from docs; broken validator; written poorly
* MapReduce
* Tez


== Text file encoding BOM Bytes

* only for unicode
* FFFE or FEFF : UTF-16 LE or BE
* or EFBBBF : utf8; special bytes that hopefully are not meaningful in other encodings
* UCS-2=UTF-16 (except TFF16 some more codepoints)
* UTF8 bytes: 0.. (<0x80); 110.. 10..; 1110.. 10.. 10..; 11110.. 10.. 10.. 10..

Use utf-8-sig, if there is a BOM byte
utf16 automatically does BOM (don't use utf-16LE unless BOM is missing)

