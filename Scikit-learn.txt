* cross_validate gives more info than cross_val_score
* GBT: depth 3-8
* RandomizedSearchCV: use distributions from scipy.stats for parameters

|===
| compose.TransformedTargetRegressor(..)    | When target transformed (e.g. power) http://scikit-learn.org/dev/modules/generated/sklearn.compose.TransformedTargetRegressor.html#sklearn.compose.TransformedTargetRegressor[Ref]
| gridsearch.refit_time_                    | Second used to refit model on whole dataset
| classification_report(..., output_dict=True)  | Return dict of metrics
|===

== Metrics

|===
| sklearn.metrics.roc_auc_score(..., max_fpr)   | Standarized partial AUC
|===

== Other

|===
| sklearn.show_versions()                   | Print versions (sklearn, Python, BLAS, ...)
| ColumnTransformer(transformers)           | https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html[Ref]
| TransformedTargetRegressor(regressor, func, inverse_func)     | https://scikit-learn.org/stable/modules/generated/sklearn.compose.TransformedTargetRegressor.html[Ref]
| datasets.dump_svllight_file(X, y, f)      |
| datasets.load_svmlight_file(f)            |
| datasets.get_data_home()                  |
|===

* `n_jobs=None` (unset) and defaults can be set with `joblib.Parallel` context


class Estimator(BaseEstimator, ClassifierMixin):
    def __init__(self, ...): # all params with defaults
        self...  # same name parameters

    def fit(self, X, y):
        X, y =check_X_y(X, y)

    def predict(self, X):
        X = check_array(X)

        


Reproduce:
num_comp = 3
pca=PCA()
X_pca=pca.fit_transform(X)
(X_pca[:,:num_comp] @ pca.components_[:num_comp]) + pca.mean_        