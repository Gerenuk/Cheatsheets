////
Seaborn 0.9
https://seaborn.pydata.org/whatsnew.html
////

= Seaborn Quickref

:toc:

== General

|===
| aspect=...                                | Width=Aspect*Size
| height=...                                |
|===

// obsolete? | size=...                                  | Plot size

== General plots

[cols="m,d"]
|===
| *relplot*(x, y, kind="scatter")           | https://seaborn.pydata.org/generated/seaborn.relplot.html[Ref]; `FacetGrid`returned
| _kind_="line"                             |
| *scatterplot*(x, y)                       | https://seaborn.pydata.org/generated/seaborn.scatterplot.html[Ref]
| *lineplot*(x, y)                          | https://seaborn.pydata.org/generated/seaborn.lineplot.html[Ref]
|===

* options `hue=`, `style=`, `size=`
* `lineplot` can show confidence intervals if multiply `y` for same `x`

== Distribution plots

[cols="m,d"]
|===
| *distplot*(data)                          | 1-variable distribution; histogram, lines, kde, rug, distr. fit
| *distplot*(data, kde=False, fit=stats.norm) | Max likelihood
| *jointplot*(„x“, „y“, df, kind="hex")     | 2-variable scatter plot with additional marginal histograms
| _kind_="reg"                              | to fit lin.reg.
| _kind_="resid"                            | to plot residuals
| _kind_="hex"                              |
| _kind_="scatter"                          |
| *pairplot*(df, hue=.., size=)             | Scatter plots for all variable pairs; Histogram for for self-plots
| *lmplot*("a", "b", df)                    | Combines regplot and FacetGrid by hue to plot linear model; 95% CI
| *lmplot*(.., hue=“c“, col=“d“)            | Use var „c“ for hue in one plot and split plots by var „d“
| *kdeplot*(data, bw=..)                    | Helper to plot KDE of 1-variable; bandwidth, shade=True, cumulative=True, color=, lw=, label=, cut=, clip=; colorpalette suffix "_d" darker so that contours fully visible
| *kdeplot*(x, y)                           | Helper to plot KDE of 2-variable; contour plot
| *rugplot*(data)                           | Helper to plot marks for numerical values
|===

== Regression plots

[cols="m,d"]
|===
| *regplot*()                               | Helper to plot regressions (order, logistic, lowess, robust, logx)
| *residplot*()                             | Plot residuals from regression
|===

* `lmplot`:
** can add jitter
** change color;
** add estimators (mean, ..)
** order=2 for 2nd order polynomial
** fit_reg=False
** lowess=True
** logistic=True, y_jitter=.05
** robust=True, n_boot=500
** x_partial="d" to remove confounder

== Categorical plots

[cols="m,d"]
|===
| *catplot*(„“, data=df)                    | shows counts
| *catplot*(„a“, „b“, df, kind=) +
  *catplot*(x, y, hue=, data=, row=, col=)  | x,y,hue; kind=“point“, „bar“, „box“; plots mean and 95CI
| _dodge_=0.05                              | to avoid errorbar overlap (jitter along x)
| _hue_order_=[..]                          |
| *boxplot*(df)                             | Multiple 1D distr.; whisker 1.5*IQR from quartiles
| *boxplot*([a,b], join_rm=True)            | show lines a[0]->b[0], ..
| *violinplot*(data, bw=..)                 | Multiple 1-var distr; order= for specifying order of vars
| *violinplot*(data, groupbyseries)         | also for boxplot
| *countplot*(x, y, hue, data)              | Count plot as bar chart
| *barplot*(x, y, hue, data)                | Bar chart point estimates with error bars
| *swarmplot*(x, y, hue, data)              | Point plot with non-overlapping semi-stacking points
| *stripplot*(x, y, hue, data)              | Point plot for categories; optional jitter
| *pointplot*(x, y, hue, data)              | Point estimates (e.g. mean) with error bars
| *boxenplot*(..)                           | Boxplot with many quantiles; https://seaborn.pydata.org/generated/seaborn.boxenplot.html[Ref]
|===

* `catplot(.., kind=..)` https://seaborn.pydata.org/tutorial/categorical.html[Ref]:
** scatter; `strip`, `swarm`
** distribution: `box`, `boxen`, `violin`
** estimate: `bar`, `count`, `point`

== Other plots

[cols="m,d"]
|===
| *heatmap*(df)                             | vars in row and col
| _annot_=True, fmt="d"                     | to annotate with integer values
| _square_=True                             |
| _center_=..                               | Value for center for diverging data
| *clustermap*()                            | Heatmap + hierarchical clustering at side
| *corrplot*(df)                            | Make correlation plot as heatmap between all variables
| _sig_tail_="upper"                        | to show only positive
| _cmap_range_=(..,..)                      |
|===

* `clustermap` can make use of `fastcluster` library
* heat-/clustermap will auto determine number of ticks to plot

== Style

[cols="m,d"]
|===
| *set_style*("darkgrid")                   | whitegrid, dark, white, ticks; can be used as context
| *despine*()                               | remove right/top spine; more options
| *set_style*(.., {..})                     | options seen from *axes_style*()
| *plotting_context*(..)
| *set_context*("talk")                     | enlarge text etc. ("talk", "poster")
| *set_context*(rc={"figure.figsize":(8,4)})    |
| mpl.*rc*("figure", figsize=(6, 6))        |
| *reset_default()                          | Restore all RC to default
| *reset_orig*()                            | Restore all RC, but respect custom
| ci_to_errsize                             | ?
| axlabel                                   | ?
|===

== Color

[cols="m,d"]
|===
| *set_color_codes*("deep")                 | Change how matplotlib colors shorthands are interpreted
| *desaturate*(color, factor)               | Desaturate a color by factor on saturation channel
| *saturate*(color)                         | Fully saturate a color
| *set_hls_values*(color, h, l, s)          | Set some of HSL of a color
| *color_palette*(..)                       | Return a list of colors
| with color_palette(..):                   | Use temporary for plots
| *set_color_codes*()                       | Reassign matplotlib single letter colors to seaborn
|===

* `color_palette`: cubehelix palette with `"ch:..."`, `"hls"`, `"husl"`, cmap

== Palettes

[cols="m,d"]
|===
| *set_palette*("husl")                     | Or „Set1“
| *palplot*(*color_palette*())              | Show current palette
| *color_palette*("husl",8)                 | as_cmap=True to use as colormap
| *husl_palette*(n_colors) +
  *hls_palette*(n_colors)                   | Evenly spaced colors 
| *cubehelix_palette*(n_colors)             | For black/white printing
| *dark_palette*(color) +
  *light_palette*(color) +
  *diverging_palette*(h_neg, h_pos) +
  *blend_palette*([col1,..])                | Blend for colors
| *crayon_palette*([colname, ..)            | Named after Crayon (see https://en.wikipedia.org/wiki/List_of_Crayola_crayon_colors)
| *mpl_palette*(name)                       | matplotlib palette name
| *choose_colorbrewer_palette*("sequential") +
  *choose_cubehelix_palette*() +
  *choose_light_palette*() +
  *choose_dark_palette*() +
  *choose_diverging_palette*()              | Interactively select a palette
|===

Palettes:

* http://stanford.edu/~mwaskom/software/seaborn/tutorial/color_palettes.html[Seaborn Color palettes]
* suffix `_r` to reverse
* `cubehelix` for variation of hue and brightness together (black-white printing)
* new maps: `rocket`, `mako`, `icefire`, `vlag`

== Axis grids

[cols="m,d"]
|=== 
| g = *FacetGrid*(df, col=, row=, hue=) +
  g.*map*(plt.hist, "var")                  |
| _margin_titles_=True                      | for variables values at side
| _hue_order_=, row_order=                  |
| _aspect_=                                 |
| _height_=                                 |
| _palette_=dict(hueval=col,..)             |
| _hue_kws_=dict(marker=..)                 |
| _col_wrap_=                               |
| _ylim_=(..)                               |
| g.*map*(plt.scatter, ..)                  |
| g.*add_legend*()                          |
| g.*set_axis_labels*(..)                   |
| g.fig.                                    |
| g=*PairGrid*(df, hue=, vars=(..))         | each row/col a different variable; default all numeric columns
| g.*map*(plt.scatter)                      |
| g.*map_offdiag*(..)                       |
| g.*map_upper*(..)                         |
| g.*map_lower*(..)                         |
| g.*add_legend*()                          |
| g.*set*(ylim=(..))                        |
| _dia_kind_="kde"                          |
| g=*JointGrid*(xvar, yvar, df)             | plot xy and also at x/y side
| g._ax_joint_                              |
| g._ax_marg_x_                             |
| g._set_axis_labels_("..", "..")           |
| fontsize=..                               |
| g.*plot*(regplot, distplot, stats.pearsonr)   |
| *jointplot*(xvar, xvar, df)               | Returns https://seaborn.pydata.org/generated/seaborn.JointGrid.html[JointGrid]
| _kind_="hex"                              |
|===

== Cookbook

Change heatmap label orientation:

    cg = clustermap(df)
    plt.setp(cg.ax_heatmap.yaxis.get_majorticklabels(), rotation=0)
    
To access cluster distance values use `cg.dendrogram_[col|row].linkage`.

== Other

* catplot `orient=` ?
* can just do multiple plots for hue