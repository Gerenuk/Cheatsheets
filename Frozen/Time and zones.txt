= General
* UTC: No DST and consistent past; But leap seconds
* future wall time has no defined timestamp since offset (tz) can change by government
* use dateutil.tz (instead of pytz) since Py3.6
* for utc use dt.timezone.utc (instead of tz lib) possible
* adding day may be 23 or 25 hours due to DST
* for json.dumps(now) [TypeError] use now.isoformat() or timestamp
* current time; time.time(), dt.datetime.fromtimestamp(ts, gettz(".."))
* datetime: time.mktime(datetime.timetuple())
* need tz.normalize(t) after adding time as otherwise no DST
* .fold attribute disambiguates repeating times due to DST

= Leap seconds
* + or - 1 sec; irregular; decided by committee
* usually 23:59:59->23:59:60->00:00:00 or 23:59:58->00:00:00
* usually 31. Dec (last 2016) or 30. Jun
* UT1 is solar time and deviates from UTC <0.9s
* TAI is exact atomic time (deviates from UT1)
* on average every 1.5years
* due to tidal friction, movement of crust/core, ...
* for UTC time deltas you would need leap second table
* times without leap seconds: TAI (Int. Atomic Time), GPS
* Unix timestamp winds back and repeats
  * time repr and timestamp are consistent
  * time difference be differ from real time passed
  * after leap second, time rewinds (when leap second just about to finish; or Mills-style: when leap second just started)
  * day has always 86400 seconds


