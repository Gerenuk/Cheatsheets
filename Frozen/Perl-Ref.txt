*************** Examples ***********************************
#/usr/bin/perl
while (<>) {
	if (/ var \s*=\s* ([\d.-]+) /x) print $1	# print value of "var"
	}
	
perl -we 'print sort { int( rand 2 ) * 2 - 1 } <>' list.m3u > random.m3u
************************************************************

perldoc -f FUNCTIONNAME

************************************************************

perldsc		Perl data structures intro
perllol		Perl data structures: arrays of arrays
perlcheat	Perl cheat sheet
perlboot		Perl OO tutorial for beginners
perldebtut	Perl debugging tutorial
perlre		Perl regular expressions, the rest of the story (esp. Extended Regex)
perlreref		Perl regular expressions quick reference
perlform		Perl formats
perldiag		Perl diagnostic messages

************************************************************

1_234_567		# "_" for legibility possible
${var}abc
${var}::abc		# braces to disambiguate

$"				# deliminator used to convert array into strings for output
(@foo,@bar)		# elements simply joined
 $hexdigit = ('a','b','c','d','e','f')[$digit-10];		# possible
 $count = () = $string =~ /\d+/g;			# counts digit groups because assignment uses number of elements on right

************************************************************

$Aref=\@Array;
@B=@$Aref;

@list = (\$a, \@b, \%c);
@list = \($a, @b, %c);      # same thing!

(...) x 5				# repeat list
'...' x 5				# concat string
^					# XOR operator

$Aref=[...];
$Href={...};
%Coderef= sub {...};

# use "+{" or "{;" to disambiguate (hash bzw. block) if neccessary

************************************************************

my ($a, $b);		# $a is "undef" but if used it is 0 (number) "" (string) error (reference)
local $a;			# $a has local value in current block, but also accessible to subroutines called
$a++			# ++ -- += -= .= on undef possible
my $x=$x;		# new $x has value of old $x
$::x				# referes to global $x

boolean false is: 0  '0'   ''   ()   undef

************************************************************

# COMMENT

"$name"				# interpolates $name but '$name' doesnt
"print(14)" and "print 14" possible
"print;"				# prints $_

************************************************************

$SCALAR=14;
my $SCALAR=14;		# create scoped variable

@LIST=(14,1,24,10);

$VAR=(...,...,"varvalue");
(..., undef, ...)=(..., 141, ...)		# throw away value
$LIST[0] is 14, $LIST[1] is1, ...
$LIST[$#LIST] is lastelement 	
$#LIST+1 is length
scalar(@LIST)+1 is length (@LIST in scalar context)
@LIST[1..3] is (1,24,10)
@SORTED=sort @LIST

%FRUIT=("apple","red","banana","yellow")
%FRUIT = ( apple  => "red", banana => "yellow", );			# "=>" is like comma which implies that left is string

scalar(%HASH) is false if empty and bucket info otherwise
$FRUIT{"apple"} is "red"
keys() is ("apple","banana")
%FRUIT{'apple','banana'} is ('red','yellow')
values() is ("red","yellow")

************************************************************

@AoA=( ["a","b"] , ["c","d"] )		# [] is constructor for array

for $i (1..10) {
        @array = somefunc($i);
        $AoA[$i] = [ @array ];			# [] is array constructor
								# $AoA[$i] =\@array; would give ref. to same variable
								# $AoA[$i] =@array; would give num. of elements in scalar context
								# @{$AoA[$i]} = @array; could use existing references like $AoA[3] = \@another_array;
    }

for $i (1..10) {
        my @array = somefunc($i);
        $AoA[$i] = \@array;			# will work because "my" rerun afreash each time through the loop
    }
    
************************************************************

$$aref[2][2]						# prefix dereference is done first!

************************************************************

if ( EXPR ) { ...
    } elsif ( EXPR ) {  ...
    } else {  ...
    }
    
unless ( EXPR ) { ... }

if  ( EXPR ) { ... }
    
... if EXPR;

... unless EXPR;				# EXPR is checked before first run

... while EXPR;				# EXPR is checked before first run

... foreach LIST;

while ( EXPR ) { ... } continue { ... }		# continue block always executed, even with "next"
next LABEL;					# executes continue and restart with condition
redo LABEL;					# redo without evaluating condition
last LABEL;					# exit loop ("continue" not executed)
    
until ( EXPR ) { ...}
    
for ($i=0; $i <= $max; $i++) { ...}
    
foreach my $element (@LIST) { print $element;}
    
foreach (@LIST) { print $_;}

do {...} until EXPR;			# "do" block is executed at least once
# here "next" and "last" wouldn't work unless
do {{... next; ... }} until EXPR;
LOOP: { do{...last; ...} until EXPR; }

use Switch;				# since perl5.8

goto STRING;				# STRING is the name of another block

*******************************************************

eq  equality
ne  inequality
lt  less than
gt  greater than
le  less than or equal
ge  greater than or equal

=   assignment
.   string concatenation
x   string multiplication
..  range operator (creates a list of numbers)

*******************************************************

open(INFILE,  "input.txt")   or die "Can't open input.txt: $!";
open(OUTFILE, ">output.txt") or die "Can't open output.txt: $!";
open(LOGFILE, ">>my.log")    or die "Can't open logfile: $!";

my $line  = <INFILE>;
my @lines = <INFILE>;

print STDERR "This is your final warning.\n";

close INFILE;

while(<*.c>)
while(<@list>)
chmod 0644, <*.c>

*******************************************************

if (/foo/)       { ... }  # true if $_ contains "foo"
if ($a =~ /foo/) { ... }  # true if $a contains "foo"

s/foo/bar/;               # replaces foo with bar in $_
$a =~ s/foo/bar/;         # replaces foo with bar in $a
$a =~ s/foo/bar/g;        # replaces ALL INSTANCES of foo with bar in $a

^                   start of string
$                   end of string

*                   zero or more of the previous thing
+                   one or more of the previous thing
?                   zero or one of the previous thing
{3}                 matches exactly 3 of the previous thing
{3,6}               matches between 3 and 6 of the previous thing
{3,}                matches 3 or more of the previous thing

*******************************************************

sub SubFunc {	# all capital name subroutines reserved for perl
$a=$_[0];		# give first argument
$a=shift;			# give argument and shift
...
return $result;	# otherwise last evaluated expression returned, otherwise empty list or undef scalar
}

my $x;
sub Mod : lvalue {		# lvalue subroutine
	$x;				# only this way (return not possible)
}
Mod()=4;			# variable $x gets new value

@b=SubFunc PARAM1,PARAM2;	# "(...)" are optional, array is returned

#  @_ = arguments to function, it is aliases (references)  for real variables!
# @ARGV = command line args

sub mysplice (\@$$@) {...}			# is prototype for compile time argument checking (see perlsub)
mysplice @array, @array, 0, @pushme

sub pi () { 3.14159 }				# constant functions

sub AUTOLOAD {...}				# called if an unknown sub is called (see perlsub)

*******************************************************

"STRING" =~ /REGEX/		# true if match
"STRING" !~ /REGEX/		# true if no match
/REGEX/					# true if match with $_
m{REGEX}				# any alternative delimiters possible with m
m' '						# for literal match

{}[]()^$.|*+?\			# meta characters
\t \n \r \033 \x1B			# tab, newline, return, octal, hex
variable substitution /${foo}bar/ works
/$foo/o					# evaluate $foo only once (e.g. in loops)
[abc0-9]					# character class (meta chars are "]\^$" or "-" in the middle)
[^0-9]					# negated

can be used inside and outside "[...]"
\d = [0-9]				#digit
\D =[^0-9]				# non-digit
\s = [\ \t\r\n\f]				#whitespace
\S = [^\s]				# non-whitespace
\w = [0-9a-zA-Z]			# word (!!! does not include üöäßÜÖÄ)
\W = [^\w]				# non-word
\b						# matches word (or string) boundary ( \w\W or \W\w )

/dog|cat/					# match "dog" or "cat" (whichever is found first)
/(a|b)c/					# grouping, extracting matches with $1 $2 ... or use regex in list context
						# \1 \2 are backreferences which can be used still in the regex!

/REGEX/i					# case insensitive
/R E G E X   #COMMENT)   /x	# ignore whitespaces and provide comments
$x ~= /REGEX/g			# successive multiple matches, position can be get/set with pos($x)
@LIST = ($x ~= /REGEX/g)		# return list of matched groupings "( )"

$var ~= s/REGEX/REPLACEMENT/	# replaces and return number of substs, $1 $2 in replacement possible
s/  /  /g					# replaces all
s/ (.*) / reverse $1 /e		# "e" mean replacement is evaluated [ eval() ]
s!!!   s{}{}   s{}//			# possible
s'''						# replacement treated as single quoted string

@LIST = split /SPLITREGEX/,  STRING		# split into substrings (and the groupings from the splitregex)

*******************************************************

${var} possible
__FILE__ , __LINE__, __PACKAGE__ built-in vars
__END__ represents end
arrays in array lose their identity
%hash = (key => value,...)
slices: @list[0..3] or @list[0,1]

*******************************************************
Style:
4-column indent
Space around most operators
If you have a really hairy regular expression, use the "/x" modifier
