Grako

Address:
* keyword meaning on context
* no contamination by lookahead constructs due to PEG

Following classes:
class myparser(Parser):
    def _myrulename_(self): #implements parser
	def myrulename(self, ast): #semantics delegate class; usually returns same AST
	def _default(self, ast): #when no method name matched
	def _postproc(self, context, ast): #if present called in semantics class after each rule
	
run:
grako -o FILE GRAMMAR

use:
parser=MyParser()
ast=parser.parse("text", rule_name="start")
print(ast)

or:
python myparser.py inputfile startrule

add semantic actions:
model=parser.parse(text, rule_name="start", semantics=MySemantics())

if need special lexical treatment:
pass descendant of grako.buffering.Buffer

Grammars:
name = expr ;  # underscore appended if name collides with Python keyword

rule names that start with uppercase do not advance over whitespace

syntax:
[ e ]  # optional
{ e }  # zero or more times; AST always returns list
{ e }+ # one or more times
&e     # positive lookahead
!e     # negative lookahead; fail if match
>includerule # include RHS of rule includerule
"text" # match text; if alphanumeric than always check until end of alphanum (next characters too) [turn off with nameguard=False in Parser or Buffer]
/regex/ # match regex
?/regex/?  # regex if "/" in pattern
rulename # invoke rulename
()     # succeed without advancing
!()    # always fails
~      # cut; don't consider other options if got here
name:e # add result of e as AST as key "name"
name+:e # same; force entry to be list even if only one element; resolve collisions by appending
@:e    # override; make AST for the complete rule be the AST for e; if want to recover only part of RHS
@+:e   # same override; make AST a list; e.g. arglist = '(' @+:arg {',' @+:arg}* ')' ;
$      # verify that end of input reached
(* comment *)

returned:
when no named items then AST is elements parsed by rule
if named items exists, then unnamed excluded from AST

Rules with arguments:
addition(Add, op="+")
   = ...
   
if no keyword param:
addition::Add, "+"
   = ...
   
see "Rules with Arguments"

"Based rules":
* rules may extend previous rules
base::Param = e1 ;
extended < base = exp2;

AST
===
* list for closures or rules with named elements
* dict for named elements; can use dict or attr access
* single entry if only one item associated with a name (unless force list with +:)
* values not found are None
* parseinfo=True in Parser gives more

Parser
======
* can change whitespace char with whitespace=
* ignorecase= if want case-insensitive
* comments_re= : regex to skip as comments; or overwrite Buffer.eatcomments()
* eol_comments_re=

Semantic Action
===============
* make class and pass to semantics= argument
* methods with rule name invoked every time the rule matches; arguments are RHS
* if you want to can define _default()
* return ast; can do AST transformations
* for preprocessing use empty rule "preproc = ();"

File inclusion
==============
#include :: "filename"

Translation
===========
* grako exposes facilities it uses to generate Python source code itself
* relies on string.Formatter
* grako constructs object model of parsed grammar
* each node descendant of rendering.Renderer
* template string left-trimmed on whitespace (e.g. for """...""" multiline)
* attributes (that dont start with _) can be accessed
* can be added or modified by overriding render_fields()
* fields lazily rendered before expanded by template -> may be instance of Renderer
* uses Formatter with additional syntax
* for newline use \\\\n otherwise interfere with left trimming

++++++++++++++++++
* pos. and neg. lookahead
* cut element
* use context manager and exceptions to backtrack
* propose packages:
  * alternative regex
  * colorama (to color trace)
  * pygraphviz (for diagrams)
* works with PyPy
* Grako++ for performance

class parser(Parser):
    def _myrule_(self)
    def myrule(self, ast) # semantic delegate
        return ast
    def _default(self, ast)
        return ast
    def _postproc(self, context, ast) # after each rule
    
par=parser()
ast=par.parse(text, rule_name="start")

OR

python myparser.py inputfile startrule

* can pass semantic actions
* can have special lexical treatment my grako.buffering.Buffer

EBNF:
name = expr;
UPPERCASE rule names do not advance whitespace
https://pypi.python.org/pypi/grako/3.5.1#expressions
unnamed elements excluded from AST if named elements exist
