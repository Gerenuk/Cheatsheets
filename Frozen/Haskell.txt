Haskell:


Dependent typing:
express invariants http://axisofeval.blogspot.com/2010/10/notes-on-dependent-types.html

another tutorial. http://learnyouahaskell.com/chapters

Most things you can do with macros, you can also do with monads/arrows/...

Haskell less interactive

Haskell no keywordsor variable length arguments

http://p-cos.net/documents/dynatype.pdf "Pascal Costanza, Dynamic vs. Static Typing ï¿½ A Pattern-Based Analysis"

"The Swine Before Perl" for a talk demonstrating a macro that cannot be done with laziness. Also, if you do want some bit to be strict, then you can't do that as a function -- mirroring the fact that Scheme's delay cannot be a function

Haskell could automatically decide what to run in parallel

Template Haskell if you really need macros

DSL (domain specific languages) for Lisp

Macros: I give some examples of such macros in Practical Common Lisp (http://www.gigamonkeys.com/book/), in particular Chapter 24 on parsing binary files

Use Haskell for data stream processing (e.g. finance) and high verification
http://www.haskell.org/haskellwiki/

Google experience http://k1024.org/~iusty/papers/icfp10-haskell-reagent.pdf



:info <operator> -> operator precedence and left or right associative (e.g. * and ^)
:module + <module>
parenthese around negative numbers
/=  not equal
operators: + * - ^(integer only) ** /= && ||
let <var> = <...>
lists: [<elem>, <elem>, <...>]  need to have the same type
[1..10]   range list
[<num1>, <num2>..<numN>]    list with custom step
<list1> ++ <list2>          concat
<elem> : <list>             prepend
"<stringtext>"
'<singlechar>'
putStrLn <str>            print string
string is just a list of chars, therefore ""==[]
Typenames start with upper case
variablenames start with lower case
typevariables start with lowercase
:set +t       print type info
:unset +t
:type <var>
:info <Type>
it is varname of last result in interpreter
Types: String, Char, Integer (arbit length), Bool, Int(System bit width, silently overflows), Double
<expr> :: <Type>    explicite type signature
<func> <arg1> <arg2> <...>    highe precedence than operators
functions:
  head <list>: first element
  tail <list>: all but first element
  take <n> <list>: first n elements
  drop <n> <list>: all but first n elements
  fst (<a>, <b>): returns a
  snd (<a>, <b>): returns b
  null <list>: test if expr is empty
  print <value>
lists used for control flow loops
tuple type: fixed size collection with different types
functions left-associative unless parenthesis: a b c d = (((a b) c) d)
for impure functions type begins with IO
write functions in source file since syntax in interpreter different
<func> <arg1> <...> = <...>    function definition
functions have no return since result is expression
a variable is only a name for an expression
use "s" as suffix for list variables
use identation to continue expressions
if <bool> then <branch1> else <branch2>    : branches need to have same types
"thunk" is unevaluated expression since haskell is lazy
Python cannot make lazy eval custom functions
for type variables code cannot find ou what type is; treats as black box, cannot create value
haskell doesnt do automatic coersion
:type take
Int -> ([a] -> [a])   ie return function in first level

declare type:
data <Typeconstr> = <Dataconstr> <Type1> <Type2> <...>
                    deriving (Show)   -- needed to print value
synonyms:
type <TypeSyn> = <TypeOld>    -- only for readability; e.g. for compound tuple types
data Bool = True | False      -- algebraic data type; more than one constructor
e.g.
data T = A B
       | C
       
pattern matching:
func (x:xs) = 
func _ =     - wild card used
wild card _ for unbound variables

avoiding accessors:
data A = A {
     accX :: X,
     accY :: Y
     } deriving (Show)
     
record construction:
a = A { accX = 1, accY = 2 }

error <str>   -- throws exception

let <var>=<expr>
in <...>

<...>
where <var>=<expr>

explicit structuring with {<...>} instead of indentation

case <expr> of
  <pat1> -> <expr1>
  <pat2> -> <expr2>
  
cannot have same variable twice in pattern

pattern can have guard started by "|"
f a | a > 0 = 1
    | a < 0 = -1
    
if ... then ... else ...
case ... of
  ... -> ...
  ... -> ...

