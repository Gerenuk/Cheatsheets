++ Git Notes

Create repository:

mkdir example
git init
-> completely local (working tree)

committing through index (snapshot)
git status (compare current status)
git add myfile (add file, working tree to index stage)

git commit (completely local, stored in index)
git log (commits not numbered, only hash of contents, need only some characters)
git show
git gui

commits have parents

configure user (if not global -> only current repository)

git checkout (to restore from index)
git revert (special commit, to go back to changes -> creates new commit, doesnt have to be most recent)
git diff (to compare commits)

git tag (put label to commits)

master branch; always points to some commit
git branch <name>
switch branches: checkout

git merge (merge into current branch)
-> fix in lines, commit

gitk (graphical log viewer)

git knows if some stuff already merged -> you can continue on features

push/poll through remote -> add remote to local repository

git clone: clone remote repository

merge automatically when pulling

++ Pro Git
Clone:
- gets all data (all branches and all history)
- specify directoy name if you dont want default

Files:
- states:
  - tracked:
    - unmodified (edit will make them modified)
    - modified (will go to stage)
    - staged (commit will make them unmodified)
  - untracked (not in last snapshot or stageing area; add will make them tracked)
- status can tell all this

.gitignore:
- glob "*", "?", "[chars]"
- end with "/" for dirs
- negate pattern by starting with "!"

Differences can be shown between filesystem/stage or stage/commit
For simplicity you can skip staging area
For removing file you might need force option (safety to prevent accidents)
Git can detect moved or renamed files

Careful: some undos cannot be reverted

If commit was incomplete, you can redo it with "amend"
You can unstage a file with reset HEAD
"Checkout" to discard changes you made to a file (file changes made will be lost)

Tags:
- lightweight (pointer to a commit)
- annotated (full objects; checksum, tagger name, email, data, message)
- one can sign tags
- push doesnt automatically push tags (need option)

Git stores snapshots (not deltas) http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is
branch is just a pointer to a commit; each commit points also to previous
HEAD points to current branch

Fast forward, when one branch is simply upstream; then just the behind pointer is moved

merging: done from where you want to merge *into*

merge done with 3-way merge:
- snapshot to merge in
- snapshot to merge into
- common ancestor
-> automatically creates new "merge commit" (has two ancestors)

or possibly resolve conflicts and commit
"git status" to check if everything merges

Remote branches:
different name: origin/master

Rebase (result the same as merge but for cleaner history):
create diff in one branch and apply to other
maintainer can just fast-forward without integration work
rebase, checkout lagging branch and merge to fastforward, then remove side branches
Do not rebase commits that you have already pushed to a public repository.