------- Variables -------------------
${#STR}			| length
expr length $STR	| length
expr $STR : '.*'	| length
expr match $STR $SUBSTR	| length of substr
expr $STR : $SUBSTR	| length of substr
expr index $STR $SUBSTR	| index of substr
${STR:POS}		| extract substr (use * or @ for STR for command line params)
${STR:POS:LEN}		| extract substr
expr substr $STR $POS $LEN	| extract substr 
expr match $STR "\($REGEX\)"	| extract substr
expr $STR : "\($REGEX\)"	| extract substr
${STR#SUBSTR}		| remove substr from front (shortest match)
${STR##SUBSTR}		| remove substr from front (longest match)
${STR%SUBSTR}		| remove substr from back (shortest match)
${STR%%SUBSTR}		| remove substr from back (longest match)
${STR/SUBSTR/REPLACE}	| replace first match of substr
${STR//SUBSTR/REPLACE}	| replace all matches of substr
${STR/#SUBSTR/REPLACE}	| replace first match of substr if matches at front
${STR/%SUBSTR/REPLACE}	| replace first match of substr if matches at back

${STR-DEF}		| use default if unset
${STR:-DEF}		| use default if unset or null
${STR=DEF}		| use default if unset and set the string
${STR+ALT}		| use alt (or null if unset)
${STR?ERR}		| print ERR if unset
${!STRPREFIX*}		| gives string with all declared variables starting with STRPREF
------- Examples -----------------------
command | tr '\n' ' '	# collect to a single line

#!/bin/bash
ls *.old | while read file; do cp $file ${file%.old}.new; done

if [ ! -r $1 ]; then echo "Can't read $1";exit;fi

filebase=`basename $file .dat`	# strips dir and suffix

var=`sed 's/A/B/' <<<$var`

if [ -n "`sed -n '/PATTERN/p' <<<STRING`" ];then echo "Pattern contained";fi

if [ "${file%.dat}" -ne "$file" ]; then echo "Its a *.dat file";fi

# $OPTIND=1 automatically at shell startup
while getopts ":ab:cde" options; do	# with no trailing ":" -> error msg for illegal params
  case $options in
    a | c ) echo 'do something with "-a" or "-c"' ;;
    b )     echo "do something with \"-b $OPTARG\"" ;;   # $OPTARG set because "b:"
    \?)     echo 'do something with "unknown option"';;
    * )     echo 'do something with rest (i.e. "-d", "-e")';;
  esac
done
# $OPTIND = index of first non-option
shift $((OPTIND-1))	# remove arguments

---------------------------------------------

*Sec 6.4: Bash conditions
*Sec 6.10: Restricted shell
*Sec 8.7: Programmable completition
*Sec 8.4: Readline key bindings

<command> &
lastpid=$!
...
kill lastpid

read -ep "Text" <var>

[time \[-p]] [!] <command> [| <command> ] # take time statistics
a{b,c}d	= abd acd

* any string
? any char
[...] given chars
?(...) *(...) +(...) repetition
@(...) one of the given patterns
!(...) not the given pattern

Directory stack: pushd popd dirs

Jobs: fg bg jobs

kill %%			# kill current job
kill %-			# kill last job
kill %"<jobcommand>"

Builtins:
. filename [<args>]			# read commands from file
exec <command>					# dont't create new process
pwd											# print working dir
test										# test condition
umask 022								# mask for new files
alias <name>=<value>		# alias
ulimit									# set resources

Vars:
CDPATH									# path for cd command
PATH										# path for executables
RANDOM									# 0...32767
SECONDS									# seconds since shell started

Startup:
1. /etc/profile
2. ~/.bash_profile
3. ~/.bash_login
4. ~/.profile



Logout:
~/.bash_logout

Interactice, but not login shell:
~/.bash_rc

${file%.suf}	strip (minimal) string from end of file

Non-interactive shell:
$BASH_ENV

ls !(*.dat|*.ps)	# show all but *.dat and *.ps
$CDPATH			# path for cd
$HISTIGNORE	# string to ignore
$PATH
$LD_LIBRARY_PATH
Arrays
Select for choices
Dereferencing
Programable completition
Simple String manipulations (Parameter expansion)
~/.inputrc to customize readline (bell-style=none, horizontal-scroll-mode=On, print-completions-horizontally=On, show-all-if-ambiguous=On, visible-stats=On)
C-r, C-s: search history
M-.: Insert last argument
C-o: execute and get next line
C-k: kill to EOL
C-x( C-x) C-xe: start,end,call macro
C-_: undo
C-x g: list expansions

History expansion (already typed)
history: show history
pushd
popd
readonly: make variables readonly
ulimit

Editing:
^_		undo
^l		clear screen
^w		erase word
^u		erase to beg of line

^error^correction		repeat last command with substitution

History:
~/.bash_history			# default for $HISTFILE has $HISTFILESIZE entries
history							# display history
$HISTSIZE lines copied to file when logout
^r		back in history
^s		forward in history

!n		command line n
!-n		command line 0-n
!!		!-1
!string			command starting with string
!?string[?]	command containing string
^string1^string2^		last command with string substituted
!!:2		2nd word from last command
!!:$		last word
!!:2-3	2-3 word
!!:*		!!:1-$
!!:n*		!!:x-$
!!:x-		!!:x-$ without last
