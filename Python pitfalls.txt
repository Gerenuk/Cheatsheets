= Python pitfalls

== Various

* default args evaluated only once (e.g. time() wouldn't work)
* default args are mutable (e.g. =[] is bad)
* float//float -> float (even though integer)
* int(-0.5)=0 (rounds up for negative numbers)
* when using integer formatting on string values -> exception "ValueError: '=' alignment not allowed in string format specifier"
* a=-1 instead of a-=1
* delete pyc file
* shadowed builtin names or keywords
* module name same as already exists
* if you advance the groupby key-group, all previous groupby values become consumed/empty -> might need to expand groupby values list early enough!
* do not to advanced iterators too early
* no raise when overloading __getitem__
* no return in function
* no "*" for repassed list arguments 
* even single tuple needs comma: (...,)
* redundant comma generates tuple
* hasattr also considers functions
* __getitem__(tuple) -> *list and **kwargs will not work
* __ne__ ->  wrong: __neq__
* def func(...,from):    -> from keyword not possible
* data read from file not converted to float
* "\n" will also be read from a file
* unpacking of lists forgotten
* missing raw in r".." (esp. in regex)
* col1, col2 = zip(*[..]) works only if list is non-empty
* comma at end creates a tuple
* other return/exit point might return different types
* for k in range(10): f(lambda k=k:k); otherwise all k the same (9)
* `~True == -2` `~False=-1` since it is treated as int (but it works for `~np.array([True, False])`)

== Float precision

* a-b+b==a only if same magnitude (e.g. 0..1), but generally a-b+b-b+b... will be either a or a-b+b if different size
* 0.5% of all x=1..100, y=1.100 , x/y*y!=x (needs at least 3 1-bits)
* Arithmetics which does not give value back: `1/49*49`, `15/11*11`, `7/25*25`, `29/7*7`

== Libraries

* pandas.read_sql_query: makes None and not float("nan") if all empty
* pandas.read_sql_table: problems with dot in table name since SQLAlchemy does a hack due to SQLite issues
* pandas broken with PYTHONIOENCODING
* xlwings fails on numpy scalar types (-> convert)

== UNSORTED

* multiple column names in Pandas DataFrame
* int("12.34") fails -> do float first
* mylist.extend(x for x in mylist)  # infinite
* cannot deepcopy or pickle operator.itemgetter
* StopIteration inside a generator stops it (even if stopiteration from somewhere else)
* datetime - timestamp
* isclose() of numpy can create weird effects since small numbers become "equal" (e.g. in sklearn.metrics.precision_recall_curve)
