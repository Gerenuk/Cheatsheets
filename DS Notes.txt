Sampling
--------
* more complicated if samples not independent
* with/without replacement
* complex schemes: cluster sampling, Latin hypercube, stratified sampling
* errors and some statistics scale as 1/sqrt(sample size)

empirical cumulative distribution function: ecdf; plot="ogive"

Notable algorithms
------------------
Clustering
..........
 BSCAN (Density-Based Spatial Clustering of Applications with Noise)
The algorithm DBSCAN, based on the formal notion of density-reachability for k-dimensional points, is designed to discover clusters of arbitrary shape. The runtime of the algorithm is of the order O(n log n) if region queries are efficiently supported by spatial index structures, i.e. at least in moderately dimensional spaces.
GDBSCAN 	
GDBSCAN (Generalized Density-Based Spatial Clustering of Applications with Noise)
GDBSCAN generalizes the notion of point densitiy and therefore it can be applied to objects of arbitrary data type, e.g. 2-dimensional polygons. 
The code for GDBSCAN (including the specialization to DBSCAN) is available by e-mail from Dr. Jörg Sander.
OPTICS 	
OPTICS (Ordering Points To Identify the Clustering Structure)
While DBSCAN computes a single level clustering, i.e. clusters of s single, user defined density, the algorithm OPTICS represents the intrinsic, hirarchical structure of the data by a (one-dimensional) ordering of the points. The resulting graph (called reachability plot) visualizes clusters of different densities as well as hierachical clusters.
Click here for our Online-Demo. The code for OPTICS is available by e-mail from Dr. Jörg Sander or Markus Breunig.
OPTICSOF 	
LOF (Local Outlier Factors)
Based on the same theoretical foundation as OPTICS, LOF computes the local outliers of a dataset, i.e. objects that are outliers relative to their surrounding space, by assigning an outlier factor to each object. This outlier factor can be used to rank the objects regarding their outlier-ness. The outlier factors can be computed very efficiently if OPTICS is used to analyze the clustering structure.

http://en.wikipedia.org/wiki/Spatial_database
kd-tree: k-dimensional tree (simple)
R-tree: spatial access data structure
M-tree: for arbitrary metric

http://pysal.org/1.3/index.html