#/usr/bin/perl
while (<>) {
	if (/ var \s*=\s* ([\d.-]+) /x) print $1	# print value of "var"
	}

##############################################

#!/usr/bin/gawk
BEGIN{while(NR<=10)getline;}	# skip header of 10 lines
{print $2,$3}			# print 2nd and 3rd column

##############################################
command | tr '\n' ' '	# collect to a single line

#!/bin/bash
ls *.old | while read file; do cp $file ${file%.old}.new; done

if [ ! -r $1 ]; then echo "Can't read $1";exit;fi

filebase=`basename $file .dat`	# strips dir and suffix

var=`sed 's/A/B/' <<<$var`

if [ -n "`sed -n '/PATTERN/p' <<<STRING`" ];then echo "Pattern contained";fi

if [ "${file%.dat}" -ne "$file" ]; then echo "Its a *.dat file";fi

# $OPTIND=1 automatically at shell startup
while getopts ":ab:cde" options; do	# with no trailing ":" -> error msg for illegal params
  case $options in
    a | c ) echo 'do something with "-a" or "-c"' ;;
    b )     echo "do something with \"-b $OPTARG\"" ;;   # $OPTARG set because "b:"
    \?)     echo 'do something with "unknown option"';;
    * )     echo 'do something with rest (i.e. "-d", "-e")';;
  esac
done
# $OPTIND = index of first non-option
shift $((OPTIND-1))	# remove arguments

##############################################

# insert a blank line above every line which matches "regex"
sed '/regex/{x;p;x;}'

# join pairs of lines side-by-side (like "paste")
sed '$!N;s/\n/ /'

# delete duplicate, nonconsecutive lines from a file. Beware not to
# overflow the buffer size of the hold space, or else use GNU sed.
sed -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P'

# delete all lines except duplicate lines (emulates "uniq -d").
sed '$!N; s/^\(.*\)\n\1$/\1/; t; D'

sed '1p2~5s/abd/def${p}}'
Line read into pattern space
(also auxiliary hold space exists)

1	for line 1
2~5	for line 2-5
$	for last line
/ /	for regexp
ADR,+3	ADR and 3 next lines
ADR,~3	ADR and up to next multiple of 3

s/ / /	replace
q	print and quit
d	(delete pattern space) start next cycle
p	print (pattern space)
