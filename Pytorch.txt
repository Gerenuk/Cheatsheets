= Operations

|===
| x + y +
  torch.add(x, y) +
  y.add_(x)                                 | Arithmetics
| x.size()                                  | Get size
| x.view(..)                                | Resize
| x.numpy()                                 | To Numpy
| torch.from_numpy(x)                       | From Numpy
| x.cuda()                                  | Send to CUDA
| torch.cuda.is_available()                 | Check CUDA
|===

= Autograd

* `autograd` package
* for automatic differentiation
* define-by-run
* Variable and Function make DAG with compute history

|===
| Variable                                  | Wraps Tensor
| .backward()                               | For gradients; need arg if not scalar
| v.data                                    | Raw Tensor
| v.grad                                    | Gradient wrt to this var
| autograd.Function                         |
| v.grad_fn                                 | Function that has created this variable
|===

* without args `v.backward()` like `v.backward(Tensor([1.0]))`

= Neural networks

http://pytorch.org/docs/master/nn.html

* with `torch.nn`
* `nn.Module` contains layers
* method `forward(input)` to return output
* always minibatches (first dim nSamples); use `input.unsqueeze(0)` to add fake dimension

|===
| nn.Modules                                | Neural network module. Convenient way of encapsulating parameters, with helpers for moving them to GPU, exporting, loading, etc.
| nn.Parameter                              | A kind of Variable, that is automatically registered as a parameter when assigned as an attribute to a Module.
| net.parameters()                          | Learnable parameters
| import torch.nn.functional as F           |
| net.zero_grad()                           | Zero gradients
|===

    F.max_pool2d(F.relu(nn.Conv2D(..)(x)), ..)

== Learning

|===
| loss_func = nn.MSELoss() +
  loss = loss_func(output, target)          |
| loss.backward()                           | Will update gradients
|===

Simplest manual update weights:

    learning_rate = 0.01
    for f in net.parameters():
        f.data.sub_(f.grad.data * learning_rate)

Packaged learning

    import torch.optim as optim

    optimizer = optim.SGD(net.parameters(), lr=0.01)

    optimizer.zero_grad()   # zero the gradient buffers
    output = net(input)
    loss = criterion(output, target)
    loss.backward()
    optimizer.step()

== Data loading

* for images `torchvision`
* outputs are `PILImage` [0,1]

=== Load data

    import torch
    import torchvision
    import torchvision.transforms as transforms

    transform = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])  # norm to [-1, 1]

    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,
                                              shuffle=True, num_workers=2)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                           download=True, transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=4,
                                             shuffle=False, num_workers=2)

    classes = ('plane', 'car', 'bird', 'cat',
               'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

=== Display some

    import matplotlib.pyplot as plt
    import numpy as np

    def imshow(img):
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(trainloader)
    images, labels = dataiter.next()

    imshow(torchvision.utils.make_grid(images))
    print(' '.join('%5s' % classes[labels[j]] for j in range(4)))

=== Simple neural network

    from torch.autograd import Variable
    import torch.nn as nn
    import torch.nn.functional as F

    class Net(nn.Module):
        def __init__(self):
            super(Net, self).__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 5 * 5, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 5 * 5)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x

    net = Net()

=== Train

    for epoch in range(2):  # loop over the dataset multiple times

        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs
            inputs, labels = data

            # wrap them in Variable
            inputs, labels = Variable(inputs), Variable(labels)

            # zero the parameter gradients
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.data[0]
            if i % 2000 == 1999:    # print every 2000 mini-batches
                print('[%d, %5d] loss: %.3f' %
                      (epoch + 1, i + 1, running_loss / 2000))
                running_loss = 0.0

    print('Finished Training')

== General

    loss.grad_fn.next_functions[0][0].next_functions[0][0]  # follow backwards

= GPU

* use `net.cuda()` and `inputs.cuda()` and `labels.cuda()`
* PyTorch 0.3.1 does not support CUDA 5.0 anymore -> compile from source
* multiple GPUs: http://pytorch.org/tutorials/beginner/blitz/data_parallel_tutorial.html


= Ready-made

    from torchvision.datasets import CIFAR10
    dd = CIFAR10("~/Data", download=True)
    plt.imshow(np.asarray(dd[0][0]))

